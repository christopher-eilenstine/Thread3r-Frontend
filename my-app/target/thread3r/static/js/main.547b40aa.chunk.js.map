{"version":3,"sources":["services/auth.service.js","components/Login.js","components/Register.js","services/auth-header.js","services/user.service.js","components/Home.js","components/Profile.js","components/BoardUser.js","components/BoardModerator.js","components/BoardAdmin.js","components/GroupSearch.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","toExport","register","username","email","password","axios","post","login","then","response","data","token","localStorage","setItem","JSON","stringify","logout","removeItem","getCurrentUser","parse","getItem","required","value","className","role","Login","props","form","useRef","checkBtn","useState","setUsername","setPassword","loading","setLoading","message","setMessage","src","alt","onSubmit","e","preventDefault","current","validateAll","context","_errors","length","AuthService","history","push","window","location","reload","error","resMessage","toString","ref","htmlFor","type","name","onChange","target","validations","disabled","style","display","validEmail","isEmail","vusername","vpassword","Register","setEmail","successful","setSuccessful","authHeader","user","Authorization","getPublicContent","get","getUserBoard","headers","getModeratorBoard","getAdminBoard","Home","content","setContent","useEffect","UserService","_content","Profile","currentUser","substring","substr","id","BoardUser","BoardModerator","BoardAdmin","GroupSearch","SearchForGroup","setSearchForGroup","App","undefined","setCurrentUser","to","href","onClick","basename","process","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.547b40aa.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst API_URL = \"http://localhost:8080/api/auth/\";\n\nconst register = (username, email, password) => {\n  return axios.post(API_URL + \"register\", {\n    username,\n    email,\n    password,\n  });\n};\n\nconst login = (username, password) => {\n  return axios\n    .post(API_URL + \"login\", {\n      username,\n      password,\n    })\n    .then((response) => {\n      if (response.data.token) {\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n\n      return response.data;\n    });\n};\n\nconst logout = () => {\n  localStorage.removeItem(\"user\");\n};\n\nconst getCurrentUser = () => {\n  return JSON.parse(localStorage.getItem('user'));\n};\n\nvar toExport = {\n  register,\n  login, \n  logout,\n  getCurrentUser,\n};\n\nexport default toExport;\n","import React, { useState, useRef } from \"react\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\n\nimport AuthService from \"../services/auth.service\";\n\nconst required = (value) => {\n  if (!value) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        This field is required!\n      </div>\n    );\n  }\n};\n\nconst Login = (props) => {\n  const form = useRef();\n  const checkBtn = useRef();\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  const onChangeUsername = (e) => {\n    const username = e.target.value;\n    setUsername(username);\n  };\n\n  const onChangePassword = (e) => {\n    const password = e.target.value;\n    setPassword(password);\n  };\n\n  const handleLogin = (e) => {\n    e.preventDefault();\n\n    setMessage(\"\");\n    setLoading(true);\n\n    form.current.validateAll();\n\n    if (checkBtn.current.context._errors.length === 0) {\n      AuthService.login(username, password).then(\n        () => {\n          props.history.push(\"/profile\");\n          window.location.reload();\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n\n          setLoading(false);\n          setMessage(resMessage);\n        }\n      );\n    } else {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"col-md-12\">\n      <div className=\"card card-container\">\n        <img\n          src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n          alt=\"profile-img\"\n          className=\"profile-img-card\"\n        />\n\n        <Form onSubmit={handleLogin} ref={form}>\n          <div className=\"form-group\">\n            <label htmlFor=\"username\">Username</label>\n            <Input\n              type=\"text\"\n              className=\"form-control\"\n              name=\"username\"\n              value={username}\n              onChange={onChangeUsername}\n              validations={[required]}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"password\">Password</label>\n            <Input\n              type=\"password\"\n              className=\"form-control\"\n              name=\"password\"\n              value={password}\n              onChange={onChangePassword}\n              validations={[required]}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <button className=\"btn btn-primary btn-block\" disabled={loading}>\n              {loading && (\n                <span className=\"spinner-border spinner-border-sm\"></span>\n              )}\n              <span>Login</span>\n            </button>\n          </div>\n\n          {message && (\n            <div className=\"form-group\">\n              <div className=\"alert alert-danger\" role=\"alert\">\n                {message}\n              </div>\n            </div>\n          )}\n          <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;","import React, { useState, useRef } from \"react\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\nimport { isEmail } from \"validator\";\n\nimport AuthService from \"../services/auth.service\";\n\nconst required = (value) => {\n  if (!value) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        This field is required!\n      </div>\n    );\n  }\n};\n\nconst validEmail = (value) => {\n  if (!isEmail(value)) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        This is not a valid email.\n      </div>\n    );\n  }\n};\n\nconst vusername = (value) => {\n  if (value.length < 3 || value.length > 20) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        The username must be between 3 and 20 characters.\n      </div>\n    );\n  }\n};\n\nconst vpassword = (value) => {\n  if (value.length < 6 || value.length > 40) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        The password must be between 6 and 40 characters.\n      </div>\n    );\n  }\n};\n\nconst Register = (props) => {\n  const form = useRef();\n  const checkBtn = useRef();\n\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [successful, setSuccessful] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  const onChangeUsername = (e) => {\n    const username = e.target.value;\n    setUsername(username);\n  };\n\n  const onChangeEmail = (e) => {\n    const email = e.target.value;\n    setEmail(email);\n  };\n\n  const onChangePassword = (e) => {\n    const password = e.target.value;\n    setPassword(password);\n  };\n\n  const handleRegister = (e) => {\n    e.preventDefault();\n\n    setMessage(\"\");\n    setSuccessful(false);\n\n    form.current.validateAll();\n\n    if (checkBtn.current.context._errors.length === 0) {\n      AuthService.register(username, email, password).then(\n        (response) => {\n          setMessage(response.data.message);\n          setSuccessful(true);\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n\n          setMessage(resMessage);\n          setSuccessful(false);\n        }\n      );\n    }\n  };\n\n  return (\n    <div className=\"col-md-12\">\n      <div className=\"card card-container\">\n        <img\n          src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n          alt=\"profile-img\"\n          className=\"profile-img-card\"\n        />\n\n        <Form onSubmit={handleRegister} ref={form}>\n          {!successful && (\n            <div>\n              <div className=\"form-group\">\n                <label htmlFor=\"username\">Username</label>\n                <Input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"username\"\n                  value={username}\n                  onChange={onChangeUsername}\n                  validations={[required, vusername]}\n                />\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"email\">Email</label>\n                <Input\n                  type=\"text\"\n                  className=\"form-control\"\n                  name=\"email\"\n                  value={email}\n                  onChange={onChangeEmail}\n                  validations={[required, validEmail]}\n                />\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"password\">Password</label>\n                <Input\n                  type=\"password\"\n                  className=\"form-control\"\n                  name=\"password\"\n                  value={password}\n                  onChange={onChangePassword}\n                  validations={[required, vpassword]}\n                />\n              </div>\n\n              <div className=\"form-group\">\n                <button className=\"btn btn-primary btn-block\">Sign Up</button>\n              </div>\n            </div>\n          )}\n\n          {message && (\n            <div className=\"form-group\">\n              <div\n                className={ successful ? \"alert alert-success\" : \"alert alert-danger\" }\n                role=\"alert\"\n              >\n                {message}\n              </div>\n            </div>\n          )}\n          <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nexport default Register;\n","export default function authHeader() {\n    const user = JSON.parse(localStorage.getItem('user'));\n  \n    if (user && user.token) {\n      return { Authorization: 'Bearer ' + user.token };\n    } else {\n      return {};\n    }\n  }\n  ","import axios from \"axios\";\nimport authHeader from \"./auth-header\";\n\nconst API_URL = \"http://localhost:8080/api/test/\";\n\nconst getPublicContent = () => {\n  return axios.get(API_URL + \"all\");\n};\n\nconst getUserBoard = () => {\n  return axios.get(API_URL + \"user\", { headers: authHeader() });\n};\n\nconst getModeratorBoard = () => {\n  return axios.get(API_URL + \"mod\", { headers: authHeader() });\n};\n\nconst getAdminBoard = () => {\n  return axios.get(API_URL + \"admin\", { headers: authHeader() });\n};\n\nconst toExport = {\n  getPublicContent,\n  getUserBoard,\n  getModeratorBoard,\n  getAdminBoard,\n}\n\nexport default toExport;","import React, { useState, useEffect } from \"react\";\n\nimport UserService from \"../services/user.service\";\n\nconst Home = () => {\n  const [content, setContent] = useState(\"\");\n\n  useEffect(() => {\n    UserService.getPublicContent().then(\n      (response) => {\n        setContent(response.data);\n      },\n      (error) => {\n        const _content =\n          (error.response && error.response.data) ||\n          error.message ||\n          error.toString();\n\n        setContent(_content);\n      }\n    );\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <header className=\"jumbotron\">\n        <h3>{content}</h3>\n      </header>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport AuthService from \"../services/auth.service\";\n\nconst Profile = () => {\n  const currentUser = AuthService.getCurrentUser();\n\n  return (\n    <div className=\"container\">\n      <header className=\"jumbotron\">\n        <h3>\n          <strong>{currentUser.username}</strong> Profile\n        </h3>\n      </header>\n      <p>\n        <strong>Token:</strong> {currentUser.token.substring(0, 20)} ...{\" \"}\n        {currentUser.token.substr(currentUser.token.length - 20)}\n      </p>\n      <p>\n        <strong>Id:</strong> {currentUser.id}\n      </p>\n      <p>\n        <strong>Email:</strong> {currentUser.email}\n      </p>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React, { useState, useEffect } from \"react\";\n\nimport UserService from \"../services/user.service\";\n\nconst BoardUser = () => {\n  const [content, setContent] = useState(\"\");\n\n  useEffect(() => {\n    UserService.getUserBoard().then(\n      (response) => {\n        setContent(response.data);\n      },\n      (error) => {\n        const _content =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString();\n\n        setContent(_content);\n      }\n    );\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <header className=\"jumbotron\">\n        <h3>{content}</h3>\n      </header>\n    </div>\n  );\n};\n\nexport default BoardUser;\n","import React, { useState, useEffect } from \"react\";\n\nimport UserService from \"../services/user.service\";\n\nconst BoardModerator = () => {\n  const [content, setContent] = useState(\"\");\n\n  useEffect(() => {\n    UserService.getModeratorBoard().then(\n      (response) => {\n        setContent(response.data);\n      },\n      (error) => {\n        const _content =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString();\n\n        setContent(_content);\n      }\n    );\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <header className=\"jumbotron\">\n        <h3>{content}</h3>\n      </header>\n    </div>\n  );\n};\n\nexport default BoardModerator;","import React, { useState, useEffect } from \"react\";\n\nimport UserService from \"../services/user.service\";\n\nconst BoardAdmin = () => {\n  const [content, setContent] = useState(\"\");\n\n  useEffect(() => {\n    UserService.getAdminBoard().then(\n      (response) => {\n        setContent(response.data);\n      },\n      (error) => {\n        const _content =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString();\n\n        setContent(_content);\n      }\n    );\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <header className=\"jumbotron\">\n        <h3>{content}</h3>\n      </header>\n    </div>\n  );\n};\n\nexport default BoardAdmin;","import React, { useState, useRef } from \"react\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\n//import AuthService from \"../services/auth.service\";\n//import GroupSearchAPI from \"../services/group-search-api\";\n\n// const required = (value) => {\n//   if (!value) {\n//     return (\n//       <div className=\"alert alert-danger\" role=\"alert\">\n//         This field is required!\n//       </div>\n//     );\n//   }\n// };\n\nconst GroupSearch = (props) => {\n  const form = useRef();\n  const checkBtn = useRef();\n\n//  const user = AuthService.getCurrentUser();\n//  const userId = user.userId;\n\n//   const [username, setUsername] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n  const [SearchForGroup, setSearchForGroup] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  const onChangeSearchForGroup = (e) => {\n    const SearchForGroup = e.target.value;\n    setSearchForGroup(SearchForGroup);\n  };\n\n//   const onChangePassword = (e) => {\n//     const password = e.target.value;\n//     setPassword(password);\n//   };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    setMessage(\"\");\n    setLoading(true);\n\n    form.current.validateAll();\n\n    if (checkBtn.current.context._errors.length === 0) {\n        //group search api goes here\n\n    //   AuthService.login(username, password).then(\n    //     () => {\n    //       props.history.push(\"/profile\");\n    //       window.location.reload();\n    //     },\n    //     (error) => {\n    //       const resMessage =\n    //         (error.response &&\n    //           error.response.data &&\n    //           error.response.data.message) ||\n    //         error.message ||\n    //         error.toString();\n\n    //       setLoading(false);\n    //       setMessage(resMessage);\n    //     }\n    //   );\n    } else {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"col-md-12\">\n      <div className=\"card card-container\">\n\n        <Form onSubmit={handleSubmit} ref={form}>\n          <div className=\"form-group\">\n            <label htmlFor=\"username\">Search for a group!</label>\n            <Input\n              type=\"text\"\n              className=\"form-control\"\n              name=\"username\"\n              value={SearchForGroup}\n              onChange={onChangeSearchForGroup}\n            //   validations={[required]}\n            />\n          </div>\n\n          {/* <div className=\"form-group\">\n            <label htmlFor=\"password\">Password</label>\n            <Input\n              type=\"password\"\n              className=\"form-control\"\n              name=\"password\"\n              value={password}\n              onChange={onChangePassword}\n              validations={[required]}\n            /> \n          </div> */}\n\n          <div className=\"form-group\">\n            <button className=\"btn btn-primary btn-block\" disabled={loading}>\n              {loading && (\n                <span className=\"spinner-border spinner-border-sm\"></span>\n              )}\n              <span>Submit</span>\n            </button>\n          </div>\n\n          {message && (\n            <div className=\"form-group\">\n              <div className=\"alert alert-danger\" role=\"alert\">\n                {message}\n              </div>\n            </div>\n          )}\n          <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nexport default GroupSearch;\n","import React, { useState, useEffect } from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport AuthService from \"./services/auth.service\";\n\nimport Login from \"./components/Login\";\nimport Register from \"./components/Register\";\nimport Home from \"./components/Home\";\nimport Profile from \"./components/Profile\";\nimport BoardUser from \"./components/BoardUser\";\nimport BoardModerator from \"./components/BoardModerator\";\nimport BoardAdmin from \"./components/BoardAdmin\";\nimport GroupSearch from \"./components/GroupSearch\";\n\nconst App = () => {\n  // const [showModeratorBoard, setShowModeratorBoard] = useState(false);\n  // const [showAdminBoard, setShowAdminBoard] = useState(false);\n  const [currentUser, setCurrentUser] = useState(undefined);\n\n  useEffect(() => {\n    const user = AuthService.getCurrentUser();\n\n    if (user) {\n      setCurrentUser(user);\n      // setShowModeratorBoard(user.roles.includes(\"ROLE_MODERATOR\"));\n      // setShowAdminBoard(user.roles.includes(\"ROLE_ADMIN\"));\n    }\n  }, []);\n\n  const logOut = () => {\n    AuthService.logout();\n  };\n\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n        <Link to={\"/\"} className=\"navbar-brand\">\n          Thread3r\n        </Link>\n        <div className=\"navbar-nav mr-auto\">\n          <li className=\"nav-item\">\n            <Link to={\"/home\"} className=\"nav-link\">\n              Home\n            </Link>\n            </li>\n            <li>\n            <Link to={\"/groups\"} className=\"nav-link\">\n              Group Search\n            </Link>\n          </li>\n\n          {/* {showModeratorBoard && (\n            <li className=\"nav-item\">\n              <Link to={\"/mod\"} className=\"nav-link\">\n                Moderator Board\n              </Link>\n            </li>\n          )}\n\n          {showAdminBoard && (\n            <li className=\"nav-item\">\n              <Link to={\"/admin\"} className=\"nav-link\">\n                Admin Board\n              </Link>\n            </li>\n          )} */}\n\n          {currentUser && (\n            <li className=\"nav-item\">\n              <Link to={\"/user\"} className=\"nav-link\">\n                User\n              </Link>\n            </li>\n          )}\n        </div>\n\n        {currentUser ? (\n          <div className=\"navbar-nav ml-auto\">\n            <li className=\"nav-item\">\n              <Link to={\"/profile\"} className=\"nav-link\">\n                {currentUser.username}\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <a href=\"/login\" className=\"nav-link\" onClick={logOut}>\n                LogOut\n              </a>\n            </li>\n          </div>\n        ) : (\n          <div className=\"navbar-nav ml-auto\">\n            <li className=\"nav-item\">\n              <Link to={\"/login\"} className=\"nav-link\">\n                Login\n              </Link>\n            </li>\n\n            <li className=\"nav-item\">\n              <Link to={\"/register\"} className=\"nav-link\">\n                Sign Up\n              </Link>\n            </li>\n          </div>\n        )}\n      </nav>\n\n      <div className=\"container mt-3\">\n        <Switch>\n          <Route basename={process.env.REACT_APP_ROUTER_BASE || ''} exact path={[\"/\", \"/home\"]} component={Home} />\n          <Route basename={process.env.REACT_APP_ROUTER_BASE || ''} exact path=\"/login\" component={Login} />\n          <Route basename={process.env.REACT_APP_ROUTER_BASE || ''} exact path=\"/register\" component={Register} />\n          <Route basename={process.env.REACT_APP_ROUTER_BASE || ''} exact path=\"/profile\" component={Profile} />\n          <Route basename={process.env.REACT_APP_ROUTER_BASE || ''} path=\"/user\" component={BoardUser} />\n          <Route basename={process.env.REACT_APP_ROUTER_BASE || ''} path=\"/mod\" component={BoardModerator} />\n          <Route basename={process.env.REACT_APP_ROUTER_BASE || ''} path=\"/admin\" component={BoardAdmin} />\n          <Route basename={process.env.REACT_APP_ROUTER_BASE || ''} exact path=\"/groups\" component={GroupSearch} />\n        </Switch>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}